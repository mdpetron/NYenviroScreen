add_trace(data = filter(pick,  P2_Stamina25_wa_CHEM == 1), inherit = F, y = ~1*P2_Stamina25_wa_CHEM,
x = ~`REPORTING YEAR`, type = "scatter", mode = "markers",marker = list(size = 8, color = "d3d3d3"), name = "P2 Release Success Year") %>%
layout(yaxis = list(title = "Pounds"),
xaxis = list(title = "Reporting Year", autotick = FALSE),
font = t,
barmode = 'stack',
title = paste("P2 Success Story Example", tools::toTitleCase(tolower(facName)), tools::toTitleCase(tolower(Chemical)), sep = ": "),
margin = list(l = 50, r = 50, t = 50, b = 50))
x <- plot_ly(data = pick, x = ~`REPORTING YEAR`, y = ~`QUANTITY RELEASED CURRENT YEAR`, type = "bar", name = "Released", marker = list(color = "#B73340")) %>%
#add_trace(y = ~`QUANTITY RELEASED CURRENT YEAR`, type = "scatter", mode = "lines", name = "Released", text = ~`SECTION 9 MISCELLANEOUS INFORMATION`)%>%
add_trace(y = ~`QUANTITY RECYCLED ONSITE CURRENT YEAR`+`QUANTITY RECYCLED OFFSITE CURRENT YEAR`, type = "bar", name = "Recycled", marker = list(color = "#019E73"))%>%
add_trace(y = ~`QUANTITY TREATED ONSITE CURRENT YEAR`+`QUANTITY TREATED OFFSITE CURRENT YEAR`, type = "bar", name = "Treated", marker = list(color = "#E6C657"))%>%
add_trace(y = ~`ENERGY RECOVERY ONSITE CURRENT YEAR`+`ENERGY RECOVERY OFFSITE CURRENT YEAR`, type = "bar", name = "E-Recovered", marker = list(color = "#57B4DF"))%>%
#add_trace(y = ~totWM_na, name = "Total PRWM") %>%
#add_trace(y = ~totalWsize, name = "Total PRW ADJ") %>%
add_trace(data = filter(pick,  P2_any == 1), inherit = F, y = ~1*P2_any,
x = ~`REPORTING YEAR`, type = "scatter", mode = "markers", marker = list(size = 20, color = "#000000"), name = "P2 Action Year",
text = ~`SECTION 8.11 DISPOSAL OR OTHER RELEASES, SOURCE REDUCTION, AND RECYCLING ACTIVITIES`) %>%
add_trace(data = filter(pick,  P2Stamina1_25_a_con == 1), inherit = F, y = ~1*P2Stamina1_25_a_con,
x = ~`REPORTING YEAR`, type = "scatter", mode = "markers",marker = list(size = 15, color = "#9900ff"), name = "P2 PRW Success Year") %>%
add_trace(data = filter(pick,  P2_Stamina25_wa_CHEM == 1), inherit = F, y = ~1*P2_Stamina25_wa_CHEM,
x = ~`REPORTING YEAR`, type = "scatter", mode = "markers",marker = list(size = 8, color = "d3d3d3"), name = "P2 Release Success Year") %>%
layout(yaxis = list(title = "Pounds"),
xaxis = list(title = "Reporting Year", autotick = FALSE),
font = t,
barmode = 'stack',
#title = paste("P2 Success Story Example", tools::toTitleCase(tolower(facName)), tools::toTitleCase(tolower(Chemical)), sep = ": "),
margin = list(l = 50, r = 50, t = 50, b = 50))
plot_ly(x)
plotly(x)
x
install.packages("ggpubr")
install.packages("installr")
library(installr)
updateR()
install.packages("sf")
library(dplyr)
library(readr)
library(readxl)
library(tigris)
library(tidycensus)
library(tidyr)
library(tidyverse)
library(sf)
library(lwgeom)
#load API key
census_api_key("3b7f443116b03bdd7ce2f1ff3f2b117cfff19e69")
##
# Census shapfiles
##
## Source: https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html
nyblock_groups <- block_groups(state = "NY")
#grab the Urban Clusters and the Native American Blockgroups
urb_zones <- urban_areas()
tribe_areas <- native_areas()
#convert to sf object
urb_zones_sf <- st_as_sf(urb_zones)
nyblock_groups_sf <- st_as_sf(nyblock_groups)
tribe_areas_sf <- st_as_sf(tribe_areas)
int_tribe <- st_intersection(nyblock_groups_sf, tribe_areas_sf)
attArea <- int_tribe %>%
mutate(area = st_area(.) %>% as.numeric())
View(attArea)
plot(int_tribe$geometry, col='green')
plot(int_tribe$geometry[1], col='green')
plot(int_tribe$geometry, col='green')
test <- attArea %>% filter(GEOID == 360339400002)
testBG <- nyblock_groups_sf %>% filter(GEOID == 360339400002)
plot(test$geometry, col='green')
plot(testBG$geometry, add=T)
plot(testBG$geometry, add=T, col = "red")
View(testBG)
View(test)
testT <- tribe_areas_sf %>% filter(GEOID == "3320R")
plot(testT$geometry, col='green')
plot(testBG$geometry, add=T, col = "red")
test$area/(test$ALAND + test$AWATER)
test$area/(as.numeric(test$ALAND) + as.numeric(test$AWATER))
attArea$amount_in_tribe <- test$area/(as.numeric(test$ALAND) + as.numeric(test$AWATER))
View(attArea)
test <- attArea %>% filter(GEOID == 360039505001)
testT <- tribe_areas_sf %>% filter(GEOID == "2535R")
testBG <- nyblock_groups_sf %>% filter(GEOID == 360339400002)
testBG <- nyblock_groups_sf %>% filter(GEOID == 360039505001)
plot(testT$geometry, col='green')
plot(testBG$geometry, add=T, col = "red")
attArea$amount_in_tribe <- attArea$area/(as.numeric(attArea$ALAND) + as.numeric(attArea$AWATER))
test <- attArea %>% filter(GEOID == 360039505001)
testT <- tribe_areas_sf %>% filter(GEOID == "2535R")
testBG <- nyblock_groups_sf %>% filter(GEOID == 360039505001)
?st_intersection
tstinter <- int_tribe %>% filter(GEOID == 360039505001)
plot(testT$geometry, col='green')
plot(testBG$geometry, add=T, col = "red")
plot(tstinter$geoms, col='grey', add=T)
plot(testT$geometry, col='green')
plot(testBG$geometry, add=T, col = "red")
plot(tstinter$geometry, col='grey', add=T)
plot(tstinter$geometry, col='grey', add=T)
plot(tstinter$geometry, col='grey')
#can it be transformed?
poly <- st_cast(tstinter)
plot(poly, col='grey')
#can it be transformed?
poly <- st_cast(tstinter, "POLYGON")
int_tribe <- st_intersections(nyblock_groups_sf, tribe_areas_sf)
int_tribe <- st_intersects(nyblock_groups_sf, tribe_areas_sf)
test <- attArea %>% filter(GEOID == 360039505001)
testT <- tribe_areas_sf %>% filter(GEOID == "2535R")
testBG <- nyblock_groups_sf %>% filter(GEOID == 360039505001)
tstinter <- int_tribe %>% filter(GEOID == 360039505001)
attArea <- int_tribe %>%
mutate(area = st_area(.) %>% as.numeric())
View(int_tribe)
?over
int_tribe_over <- over(nyblock_groups, tribe_areas)
library(sp)
library(rgeos)
int_tribe_over <- over(nyblock_groups, tribe_areas)
View(int_tribe_over)
?gIntersection
int_tribe_gIntersection <- gIntersection(nyblock_groups, tribe_areas)
View(int_tribe_gIntersection)
plot(int_tribe_gIntersection)
int_tribe_gIntersection <- intersect(nyblock_groups, tribe_areas)
library(raster)
int_tribe_gIntersection <- raster::intersect(nyblock_groups, tribe_areas)
int_tribe_intersect <- raster::intersect(nyblock_groups, tribe_areas)
View(int_tribe_intersect)
plot(int_tribe_intersect, add = T)
int_tribe_intersect_sf <- st_as_sf(int_tribe_intersect)
int_tribe_intersect_sf_tst <- int_tribe_intersect_sf  %>% filter(GEOID == 360039505001)
int_tribe_intersect_sf_tst <- int_tribe_intersect_sf$  %>% filter(GEOID.1 == 360039505001)
int_tribe_intersect_sf_tst <- int_tribe_intersect_sf  %>% filter(GEOID.1 == 360039505001)
plot(testT$geometry, col='green')
plot(testBG$geometry, add=T, col = "red")
plot(int_tribe_intersect_sf_tst$geometry, col='grey')
plot(int_tribe_intersect_sf_tst, col='grey')
plot(st_join(testT, testBG))
tst_join <- st_join(testT, testBG)
plot(tst_join$geometry)
plot(testT$geometry, col='green')
plot(testBG$geometry, add=T, col = "red")
plot(tst_join$geometry, add = T)
plot(tst_join$geometry, add = T,col='grey')
tst_join <- st_join(testT, testBG, st_touches)
plot(tst_join$geometry, add = T,col='grey')
plot(testT$geometry, col='green')
plot(testBG$geometry, add=T, col = "red")
tst_join <- st_join(testT, testBG, left = FALSE)
plot(tst_join$geometry, add = T,col='grey')
plot(testT$geometry, col='green')
plot(testBG$geometry, add=T, col = "red")
tst_join <- st_union(testT, testBG, left = FALSE)
plot(tst_join$geometry, add = T,col='grey')
attArea <- tst_join %>%
mutate(area = st_area(.) %>% as.numeric())
View(attArea)
attArea$amount_in_tribe <- (as.numeric(attArea$ALAND) + as.numeric(attArea$AWATER) +
as.numeric(attArea$ALAND.1) + as.numeric(attArea$AWATER.1)) - area
attArea$amount_in_tribe <- (as.numeric(attArea$ALAND) + as.numeric(attArea$AWATER) +
as.numeric(attArea$ALAND.1) + as.numeric(attArea$AWATER.1)) - as.numeric(area)
attArea$amount_in_tribe <- (as.numeric(attArea$ALAND) + as.numeric(attArea$AWATER) +
as.numeric(attArea$ALAND.1) + as.numeric(attArea$AWATER.1))
attArea$total_area <- (as.numeric(attArea$ALAND) + as.numeric(attArea$AWATER) +
as.numeric(attArea$ALAND.1) + as.numeric(attArea$AWATER.1))
as.numeric(attArea$ALAND.1) + as.numeric(attArea$AWATER.1)
as.numeric(attArea$ALAND) + as.numeric(attArea$AWATER)
attArea$total_area <- (as.numeric(testT$ALAND) + as.numeric(testT$AWATER) +
as.numeric(testBG$ALAND.1) + as.numeric(testBG$AWATER.1))
attArea$total_area <- (as.numeric(testT$ALAND) + as.numeric(testT$AWATER) +
as.numeric(testBG$ALAND) + as.numeric(testBG$AWATER))
?st_join
tst_join <- st_union(testT, testBG, join = st_overlaps, left = FALSE)
plot(tst_join$geometry, add = T,col='grey')
attArea <- tst_join %>%
mutate(area = st_area(.) %>% as.numeric())
tst_join <- st_union(testT, testBG, join = st_within)
plot(tst_join$geometry, add = T,col='grey')
attArea <- tst_join %>%
mutate(area = st_area(.) %>% as.numeric())
attArea$area
tst_join <- st_union(testT, testBG, join = st_covers)
attArea <- tst_join %>%
mutate(area = st_area(.) %>% as.numeric())
attArea$area
tst_join <- st_union(testT, testBG, join = st_contains)
attArea <- tst_join %>%
mutate(area = st_area(.) %>% as.numeric())
attArea$area
st_area(tst_join)
tst_join <- st_combine(testT, testBG, join = st_contains)
tst_join <- st_combine(testT, testBG)
tst_join <- st_union(testT, testBG, by_feature = F)
st_area(tst_join)
raster::area(tst_join)
raster(tst_join)
tstraster <- raster(tst_join)
plot(tstraster)
View(tstraster)
area(tstraster)
area_raster <- area(tstraster)
View(area_raster)
area_raster$layer
area_raster$layer$layer$layer$layer
area_raster <- area(tstraster,1)
area = nrow(tstraster)  * ncol(tstraster)  * xres(tstraster) * yres(tstraster)
ncol(tstraster)
xres(tstraster)
nrow(tstraster)
tst_sp <- as(tst_join, "Spatial")
gArea(tst_sp)
tst_sp <- sf:::as_Spatial(tst_join)
gArea(tst_sp)
#project
tst_sp.2 <- spTransform(tst_sp, CRS("+init=epsg:26978"))
gArea(tst_sp.2)
attArea$area
plot(tst_sp.2)
tst_sp.2 %>%
leaflet() %>%
addTiles() %>%
addPolygons(fill = "blue")
library(leaflet)
tst_sp.2 %>%
leaflet() %>%
addTiles() %>%
addPolygons(fill = "blue")
tst_sp %>%
leaflet() %>%
addTiles() %>%
addPolygons(fill = "blue")
tst_T_sp <- sf:::as_Spatial(testT)
tst_BG_sp <- sf:::as_Spatial(testBG)
tst_sp %>%
leaflet() %>%
addTiles() %>%
addPolygons(fill = "blue") %>%
addPolygons(tst_T_sp, fill = "red") %>%
addPolygons(tst_T_sp, fill = "yellow") %>%
#project
tst_sp.2 <- spTransform(tst_sp, CRS("+init=epsg:26978"))
tst_sp %>%
leaflet() %>%
addTiles() %>%
addPolygons(fill = "blue") %>%
addPolygons(tst_T_sp, fill = "red") %>%
addPolygons(tst_T_sp, fill = "yellow")
tst_sp %>%
leaflet() %>%
addTiles() %>%
addPolygons(fill = "blue") %>%
addPolygons(tst_T_sp, fill = "red") %>%
addPolygons(tst_BG_sp, fill = "yellow")
tst_T_sp %>%
leaflet() %>%
addTiles() %>%
addPolygons(fill = "blue") %>%
#project
tst_sp.2 <- spTransform(tst_sp, CRS("+init=epsg:26978"))
tst_T_sp %>%
leaflet() %>%
addTiles() %>%
addPolygons(fill = "blue")
tst_BG_sp %>%
leaflet() %>%
addTiles() %>%
addPolygons(fill = "blue")
int <- st_intersection(nyblock_groups_sf, urb_zones_sf)
int2 <- st_as_sf(int)
attArea <- int2 %>%
mutate(area = st_area(.) %>% as.numeric())
attArea$amount_in_Urban <- attArea$area/(as.numeric(attArea$ALAND) + as.numeric(attArea$AWATER))
View(attArea)
View(attArea)
attArea_tribe <- int_tribe %>%
mutate(area = st_area(.) %>% as.numeric())
int_tribe <- st_intersects(nyblock_groups_sf, tribe_areas_sf)
int_tribe <- st_intersection(nyblock_groups_sf, tribe_areas_sf)
int_tribe_intersect_sf <- st_as_sf(int_tribe)
int_tribe <- st_as_sf(int_tribe)
attArea_tribe <- int_tribe %>%
mutate(area = st_area(.) %>% as.numeric())
attArea_tribe$amount_in_Tribe <- attArea_tribe$area/(as.numeric(attArea_tribe$ALAND) + as.numeric(attArea_tribe$AWATER))
tribes <- as.data.frame(attArea_tribe)
tribes <- tribes %>% mutate(Tribal_Area = ifelse(amount_in_Tribe > 0, 1, 0),
Tribal_Area_or_Border = ifelse(!is.na(amount_in_Tribe), 1, 0))
View(tribes)
tribes <- tribes %>% mutate(Tribal_Area = ifelse(amount_in_Tribe > 0, 1, 0),
Tribal_Area_or_Border = ifelse(!is.na(amount_in_Tribe), 1, 0)) %>%
select(GEOID, NAMELSAD.1, amount_in_Tribe, Tribal_Area, Tribal_Area_or_Border)
tribes <- tribes %>% mutate(Tribal_Area = ifelse(amount_in_Tribe > 0, 1, 0),
Tribal_Area_or_Border = ifelse(!is.na(amount_in_Tribe), 1, 0)) %>%
dplyr::select(GEOID, NAMELSAD.1, amount_in_Tribe, Tribal_Area, Tribal_Area_or_Border)
Urban <- as.data.frame(attArea)
Urban <- Urban %>% mutate(Urban_Area_50per = ifelse(amount_in_Urban > 0.5, 1, 0))
View(Urban)
Urban <- Urban %>% mutate(Urban_Area_50per = ifelse(amount_in_Urban > 0.5, 1, 0)) %>%
dplyr::select(GEOID, NAMELSAD10, amount_in_Urban, Urban_Area_50per)
nyblock_groups <- ms_simplify(nyblock_groups)
setwd("C:/Users/Mike Petroni/Documents/GitHub/NYenviroScreen")
# R Libraries
library(dplyr)
library(readr)
library(readxl)
library(tigris)
library(tidycensus)
library(tidyr)
library(tidyverse)
library(sf)
# library(rmapshaper)
# library(maptools)
library(gpclib)
# library(lwgeom)
# library(sp)
# library(rgeos)
# library(raster)
library(leaflet)
#load API key
census_api_key("3b7f443116b03bdd7ce2f1ff3f2b117cfff19e69")
# download and read into workspace
# download.file("https://furmancenter.org/files/floodzone_states/NY-FloodzoneData-Download.xlsx",
#               destfile = "data/NY-FloodzoneData-Download.xlsx", mode="wb")
flood_risk_ny <- read_excel("data/NY-FloodzoneData-Download.xlsx",
sheet = 5)
##
# EPA EJScreen
##
## Source: https://www.epa.gov/ejscreen
# download and unzip - this is a large USA file
# download.file("ftp://newftp.epa.gov/EJSCREEN/2019/EJSCREEN_2019_USPR.csv.zip",
#               destfile = "data/EJSCREEN_2019_USPR.csv.zip")
# unzip("data/EJSCREEN_2019_USPR.csv.zip", exdir="./data")
# grab EJscreen
ejScreen <- read_csv("data/EJSCREEN_2019_USPR.csv")
#names(ejScreen)
#subset to NY
ejScreenNY <- ejScreen %>% filter(ST_ABBREV == "NY")
##
# NYS Heat Vulnerability Index Data
##
## Source: https://www.health.ny.gov/environmental/weather/vulnerability_index/
# download.file("https://www.health.ny.gov/environmental/weather/vulnerability_index/docs/heat_vulnerability_index_data.zip",
#               destfile = "data/heat_vulnerability_index_data.zip")
# unzip("data/heat_vulnerability_index_data.zip", exdir="./data")
NY_heat_vul <- read_excel("data/NYS Heat Vulnerability Index Data_by Census Tract.xlsx")
##
# Heath indicators
##
## Source: https://health.data.ny.gov/Health/Prevention-Agenda-2013-2018-Tracking-Indicators-Co/7j59-48xy
NY_health <- read_csv("https://health.data.ny.gov/api/views/7j59-48xy/rows.csv?accessType=DOWNLOAD")
#what indicators do we want?
NY_health_short <- NY_health %>% filter(Indicator %in% c(
"Asthma emergency department visit rate per 10,000 population",
"Age-adjusted heart attack hospitalization rate per 10,000 population",
"Percentage of preterm birth",
"Percentage of premature deaths (before age 65 years)")) %>%
group_by(`County Name`, Indicator) %>%
filter(`Data Years` == max(`Data Years`, na.rm = T)) %>% ungroup() %>% #take the most recent year
mutate(Indicator = paste(Indicator, `Data Years`, sep = " - ")) %>%
select(`County Name`, Indicator, `Percentage/Rate/Ratio`) %>%
group_by(`County Name`) %>%
spread(Indicator, `Percentage/Rate/Ratio`) %>% ungroup()
#county fips
#downlaod the fips coade for each county to use as a merging field
acs2018_ny_county <- get_acs(geography = "county",
state = "NY",
variables = c(population = "B01001_001"),
year = 2018)
acs2018_ny_county$`County Name` <- sapply(strsplit(acs2018_ny_county$NAME," County"), `[`, 1)
#join in the fips with the county health data
countykey <- acs2018_ny_county %>% dplyr::select(`County Name`, GEOID)
NY_health_short <- left_join(NY_health_short, countykey)
# USDA tract level food deserts 2015
# download.file("https://www.ers.usda.gov/webdocs/DataFiles/80591/DataDownload2015.xlsx?v=5315.6",
#                destfile = "data/DataDownload2015.xlsx", mode="wb")
Food_insecure <- read_excel("data/DataDownload2015.xlsx",
sheet = 3)
Food_insecure_ny <- Food_insecure %>% filter(State == "New York")
View(Food_insecure_ny)
Food_insecure_ny <- Food_insecure %>% filter(State == "New York") %>%
dplyr::select(CensusTract, LILATracts_1And10)
NY_drink <- read_csv("https://apps.health.ny.gov/statistics/environmental/public_health_tracking/tracker/files/water/drinking_water.csv")
#create a county average (blunt but all we can do right now)
NY_drink <- left_join(NY_drink, countykey, by = c("PRIN_CNTY" = "County Name"))
#take the most recent year... 2009?
NY_drink_09 <- NY_drink %>% filter(YEAR == 2009)
unique(NY_drink_09$PRIN_CNTY)
#make the NA values
NY_drink_09 <- NY_drink_09 %>%
mutate(ASMAXCONC = ifelse(ASMAXCONC == -999, NA, ASMAXCONC),
NITRATEMAXCONC  = ifelse(NITRATEMAXCONC  == -999, NA, NITRATEMAXCONC),
TTHMMAXCONC = ifelse(TTHMMAXCONC == -999, NA, TTHMMAXCONC),
HAA5MAXCONC = ifelse(HAA5MAXCONC == -999, NA, HAA5MAXCONC)) %>%
mutate(ASMAXCONC_pop = ASMAXCONC*SYSTEM_POPULATION,
NITRATEMAXCONC_pop  = NITRATEMAXCONC*SYSTEM_POPULATION,
TTHMMAXCONC_pop = TTHMMAXCONC*SYSTEM_POPULATION,
HAA5MAXCONC_pop = HAA5MAXCONC*SYSTEM_POPULATION)
#Population weighted averages
NY_drink_09 <- NY_drink_09 %>% group_by(PRIN_CNTY, GEOID) %>%
summarise(county_pop = sum(SYSTEM_POPULATION),
ASMAXCONC_w = sum(ASMAXCONC_pop, na.rm = T),
NITRATEMAXCONC_w  = sum(NITRATEMAXCONC_pop, na.rm = T),
TTHMMAXCONC_w = sum(TTHMMAXCONC_pop, na.rm = T),
HAA5MAXCONC_w = sum(HAA5MAXCONC_pop, na.rm = T)) %>% ungroup()
NY_drink_09 <- NY_drink_09 %>%
transmute(GEOID = GEOID,
ASMAXCONC_w = ASMAXCONC_w/county_pop,
NITRATEMAXCONC_w  = NITRATEMAXCONC_w/county_pop,
TTHMMAXCONC_w = TTHMMAXCONC_w/county_pop,
HAA5MAXCONC_w = HAA5MAXCONC_w/county_pop)
#percentile each contaminant, then sum for score
NY_drink_09_P <- NY_drink_09 %>%
transmute(GEOID = GEOID,
ASMAXCONC_P = percent_rank(ASMAXCONC_w)*100,
NITRATEMAXCONC_P  = percent_rank(NITRATEMAXCONC_w)*100,
TTHMMAXCONC_P = percent_rank(TTHMMAXCONC_w)*100,
HAA5MAXCONC_P = percent_rank(HAA5MAXCONC_w)*100) %>%
mutate(DrinkWaterScore = ASMAXCONC_P + NITRATEMAXCONC_P + TTHMMAXCONC_P + HAA5MAXCONC_P)
#pesticide application by county
# county level, need to scrape
#https://www.dec.ny.gov/docs/materials_minerals_pdf/prl2013.pdf
# Lots of county level environemtnal indictors from DOH
# https://www.health.ny.gov/environmental/public_health_tracking/
#additional indicators....
# air majors
# air minors
# hazardous waste sites
# hospital desert
# food desert
# superfund sites
# public schools
# parks / recreational areas
# tree canopy
# health/environmental advocacy groups
# Pathogenic and salutogenic infrastructure...
#  proposed generating facilities
# http://www3.dps.ny.gov/W/PSCWeb.nsf/All/763B187DD5A792DE8525847400667D6B?OpenDocument
##
# Census shapfiles
##
## Source: https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html
nyblock_groups <- block_groups(state = "NY")
nyblock_groups_2000 <- block_groups(state = "NY", cb = T, year = 2000)
#grab the Urban Clusters and the Native American Blockgroups
urb_zones <- urban_areas()
tribe_areas <- native_areas()
#convert to sf object
urb_zones_sf <- st_as_sf(urb_zones)
nyblock_groups_sf <- st_as_sf(nyblock_groups)
tribe_areas_sf <- st_as_sf(tribe_areas)
#ok lets do an intersection to get the percentage of urban area and native area for each ny bg
st_crs(urb_zones_sf)
st_crs(nyblock_groups_sf)
int <- st_intersection(nyblock_groups_sf, urb_zones_sf)
int2 <- st_as_sf(int)
attArea <- int2 %>%
mutate(area = st_area(.) %>% as.numeric())
attArea$amount_in_Urban <- attArea$area/(as.numeric(attArea$ALAND) + as.numeric(attArea$AWATER))
#tribes interstion and area percentages
int_tribe <- st_intersection(nyblock_groups_sf, tribe_areas_sf)
int_tribe <- st_as_sf(int_tribe)
attArea_tribe <- int_tribe %>%
mutate(area = st_area(.) %>% as.numeric())
attArea_tribe$amount_in_Tribe <- attArea_tribe$area/(as.numeric(attArea_tribe$ALAND) + as.numeric(attArea_tribe$AWATER))
# make sure that the SF intersection process works
# test <- attArea %>% filter(GEOID == 360039505001)
# testT <- tribe_areas_sf %>% filter(GEOID == "2535R")
# testBG <- nyblock_groups_sf %>% filter(GEOID == 360039505001)
# tstinter <- int_tribe %>% filter(GEOID == 360039505001)
# tst_BG_sp %>%
#   leaflet() %>%
#   addTiles() %>%
#   addPolygons(fill = "blue")
#now lets merge our indictors back into the dataset
tribes <- as.data.frame(attArea_tribe)
tribes <- tribes %>% mutate(Tribal_Area = ifelse(amount_in_Tribe > 0, 1, 0),
Tribal_Area_or_Border = ifelse(!is.na(amount_in_Tribe), 1, 0)) %>%
dplyr::select(GEOID, NAMELSAD.1, amount_in_Tribe, Tribal_Area, Tribal_Area_or_Border)
Urban <- as.data.frame(attArea)
Urban <- Urban %>% mutate(Urban_Area_50per = ifelse(amount_in_Urban > 0.5, 1, 0)) %>%
dplyr::select(GEOID, NAMELSAD10, amount_in_Urban, Urban_Area_50per)
#simplify boundaries for better app performance
#grab the Urban Clusters and the Native American Blockgroups
urb_zones <- urban_areas()
#grab the Urban Clusters and the Native American Blockgroups
urb_zones <- tidycensus::urban_areas()
#grab the Urban Clusters and the Native American Blockgroups
urb_zones <- tigris::urban_areas()
#grab the Urban Clusters and the Native American Blockgroups
library(tigris)
urb_zones <- tigris::urban_areas()
# library(lwgeom)
library(sp)
urb_zones <- tigris::urban_areas()
library(dplyr)
library(readr)
library(readxl)
library(tigris)
library(tidycensus)
library(tidyr)
library(tidyverse)
library(sf)
library(rmapshaper)
library(maptools)
library(gpclib)
library(lwgeom)
library(sp)
library(rgeos)
library(raster)
library(leaflet)
urb_zones <- tigris::urban_areas()
