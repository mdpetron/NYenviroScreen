bg.color = "white",
title.size = 1,
inner.margin = .08,
legend.title.size = 1)
bbox_new <- st_bbox(shapeny) # current bounding box
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
bbox_new[1] <- bbox_new[1] + (0.57 * xrange) # xmin - left
bbox_new[3] <- bbox_new[3] - (0.000000000000001 * xrange) # xmax - right
bbox_new[2] <- bbox_new[2] + (0.000000000000001 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] - (0.57 * yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
st_as_sfc() # ... and make it a sf polygon
# draw a prettier chart
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "tan") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
tmap_arrange(map2, map1a)
tmap_arrange(map2, map1a)
#unique(Rich$peja_18_hybrid_cat)
map1a <-   tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() + tm_shape(Rich) +
tm_fill(col = "peja_18_hybrid_cat",
style = "cat",
title = "Legend - PEJA Type",
alpha = 1,
palette = c('#33a02c', "#b2df8a", "#1f78b4", "#a6cee3")) +
# tm_compass(type = "8star", position = c("left", "middle")) +
tm_layout("(b)",
legend.position = c("left","top"),
bg.color = "white",
title.size = 1,
inner.margin = .08,
legend.title.size = 1)
map2 <- tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() + tm_shape(Rich00) +
tm_fill(col = "peja_00_cat",
style = "cat",
title = "Legend - PEJA Type",
alpha = 1,
palette = c("#8073ac")) +
tm_layout("(a)",
legend.position = c("left","top"),
bg.color = "white",
title.size = 1,
inner.margin = .08,
legend.title.size = 1)
tmap_arrange(map2, map1a)
mycounty <- subset(nycounties, nycounties$NAME %in% c("Ulster", "Sullivan",
"Dutchess", "Orange",
"Putnam", "Westchester",
"Nassau", "Queens",
"Kings", "Suffolk",
"Richmond", "New York",
"Bronx", "Rockland"))
Rich <- subset(ejshp, ejshp$`County Name` %in% c("Ulster", "Sullivan",
"Dutchess", "Orange",
"Putnam", "Westchester",
"Nassau", "Queens",
"Kings", "Suffolk",
"Richmond", "New York",
"Bronx", "Rockland") & ejshp$ALAND > 0)
Rich00 <- subset(ej2k, ej2k$COUNTY %in% unique(substr(Rich$GEOID, 3, 5)))
#ok lets go with a 4 by 4 design
#first box is going to be NYS with the inset box to show zoomed in area
#next three with be the new methods overlayed infront of the 2003 areas
library(tmap)
Rich$peja_18_hybrid_cat <- ifelse(Rich$peja_18_cal == 1 & Rich$peja_18_breaks == 1, "Both Models",
ifelse(Rich$peja_18_breaks == 1 & Rich$peja_18_cal == 0, "Natural Breaks",
ifelse(Rich$peja_18_cal == 1 & Rich$peja_18_breaks == 0, "CalEPA",
ifelse(!is.na(Rich$Tribal_Area_or_Border), "Inside or Adjacent to Tribe Area",
"No"))))
Rich <- subset(Rich, Rich$peja_18_hybrid_cat %in% c("Both Models", "CalEPA", "Natural Breaks", "Inside or Adjacent to Tribe Area"))
unique(Rich$peja_18_hybrid_cat)
map1a <-   tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() + tm_shape(Rich) +
tm_fill(col = "peja_18_hybrid_cat",
style = "cat",
title = "Legend - PEJA Type",
alpha = 1,
palette = c('#33a02c', "#b2df8a", "#1f78b4", "#a6cee3")) +
# tm_compass(type = "8star", position = c("left", "middle")) +
tm_layout("(b)",
legend.position = c("left","bottom"),
bg.color = "white",
title.size = 1,
inner.margin = .08,
legend.title.size = 1)
Rich00$peja_00_cat <- ifelse(Rich00$peja2k.1 == 1, "2003 PEJA", "No")
Rich00 <- subset(Rich00, Rich00$peja_00_cat %in% c("2003 PEJA"))
map2 <- tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() + tm_shape(Rich00) +
tm_fill(col = "peja_00_cat",
style = "cat",
title = "Legend - PEJA Type",
alpha = 1,
palette = c("#8073ac")) +
tm_layout("(a)",
legend.position = c("left","bottom"),
bg.color = "white",
title.size = 1,
inner.margin = .08,
legend.title.size = 1)
#for the box
bbox_new <- st_bbox(shapeny) # current bounding box
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
bbox_new[1] <- bbox_new[1] + (0.57 * xrange) # xmin - left
bbox_new[3] <- bbox_new[3] - (0.000000000000001 * xrange) # xmax - right
bbox_new[2] <- bbox_new[2] + (0.000000000000001 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] - (0.57 * yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
st_as_sfc() # ... and make it a sf polygon
# draw a prettier chart
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
bbox_new <- st_bbox(shapeny) # current bounding box
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
bbox_new[1] <- bbox_new[1] + (0.57 * xrange) # xmin - left
bbox_new[3] <- bbox_new[3] - (0.000000000000001 * xrange) # xmax - right
bbox_new[2] <- bbox_new[2] + (0.000000000000001 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] - (0.57 * yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
st_as_sfc() # ... and make it a sf polygon
# draw a prettier chart
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
bbox_new <- st_bbox(shapeny) # current bounding box
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
bbox_new[1] <- bbox_new[1] + (0.0001 * xrange) # xmin - left
bbox_new[3] <- bbox_new[3] - (0.1 * xrange) # xmax - right
bbox_new[2] <- bbox_new[2] + (0.43 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] - (0.0001 * yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
st_as_sfc() # ... and make it a sf polygon
# draw a prettier chart
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
bbox_new <- st_bbox(shapeny) # current bounding box
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
bbox_new[1] <- bbox_new[1] + (0.000001 * xrange) # xmin - left
bbox_new[3] <- bbox_new[3] - (0.15 * xrange) # xmax - right
bbox_new[2] <- bbox_new[2] + (0.3 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] - (0.00000000000000001 * yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
st_as_sfc() # ... and make it a sf polygon
# draw a prettier chart
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
bbox_new <- st_bbox(shapeny) # current bounding box
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
bbox_new[1] <- bbox_new[1] + (.1 + xrange) # xmin - left
bbox_new[3] <- bbox_new[3] - (0.15 * xrange) # xmax - right
bbox_new[2] <- bbox_new[2] + (0.3 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] - (.1 + yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
st_as_sfc() # ... and make it a sf polygon
# draw a prettier chart
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
bbox_new <- st_bbox(shapeny) # current bounding box
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
bbox_new[1] <- bbox_new[1] - (0.000000000000000000000001 * xrange) # xmin - left
bbox_new[3] <- bbox_new[3] - (0.15 * xrange) # xmax - right
bbox_new[2] <- bbox_new[2] + (0.3 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] + (0.00000000000000001 * yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
st_as_sfc() # ... and make it a sf polygon
# draw a prettier chart
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
bbox_new <- st_bbox(shapeny) # current bounding box
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
bbox_new[1] <- bbox_new[1] - (0.01 * xrange) # xmin - left
bbox_new[3] <- bbox_new[3] - (0.15 * xrange) # xmax - right
bbox_new[2] <- bbox_new[2] + (0.3 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] + (0.01 * yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
st_as_sfc() # ... and make it a sf polygon
# draw a prettier chart
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
bbox_new <- st_bbox(shapeny) # current bounding box
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
bbox_new[1] <- bbox_new[1] - (0.01 * xrange) # xmin - left
bbox_new[3] <- bbox_new[3] - (0.15 * xrange) # xmax - right
bbox_new[2] <- bbox_new[2] + (0.31 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] + (0.01 * yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
st_as_sfc() # ... and make it a sf polygon
# draw a prettier chart
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
bbox_new <- st_bbox(shapeny) # current bounding box
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
bbox_new[1] <- bbox_new[1] - (0.01 * xrange) # xmin - left
bbox_new[3] <- bbox_new[3] - (0.15 * xrange) # xmax - right
bbox_new[2] <- bbox_new[2] + (0.285 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] + (0.01 * yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
st_as_sfc() # ... and make it a sf polygon
# draw a prettier chart
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
mycounty <- subset(nycounties, !nycounties$NAME %in% c("Ulster", "Sullivan",
"Dutchess", "Orange",
"Putnam", "Westchester",
"Nassau", "Queens",
"Kings", "Suffolk",
"Richmond", "New York",
"Bronx", "Rockland"))
# draw a prettier chart
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
tmap_arrange(map2, map1a)
mycounty <- subset(nycounties, !nycounties$NAME %in% c("Ulster", "Sullivan",
"Dutchess", "Orange",
"Putnam", "Westchester",
"Nassau", "Queens",
"Kings", "Suffolk",
"Richmond", "New York",
"Bronx", "Rockland"))
Rich <- subset(ejshp, !ejshp$`County Name` %in% c("Ulster", "Sullivan",
"Dutchess", "Orange",
"Putnam", "Westchester",
"Nassau", "Queens",
"Kings", "Suffolk",
"Richmond", "New York",
"Bronx", "Rockland") & ejshp$ALAND > 0)
Rich00 <- subset(ej2k, ej2k$COUNTY %in% unique(substr(Rich$GEOID, 3, 5)))
#ok lets go with a 4 by 4 design
#first box is going to be NYS with the inset box to show zoomed in area
#next three with be the new methods overlayed infront of the 2003 areas
library(tmap)
Rich$peja_18_hybrid_cat <- ifelse(Rich$peja_18_cal == 1 & Rich$peja_18_breaks == 1, "Both Models",
ifelse(Rich$peja_18_breaks == 1 & Rich$peja_18_cal == 0, "Natural Breaks",
ifelse(Rich$peja_18_cal == 1 & Rich$peja_18_breaks == 0, "CalEPA",
ifelse(!is.na(Rich$Tribal_Area_or_Border), "Inside or Adjacent to Tribe Area",
"No"))))
Rich <- subset(Rich, Rich$peja_18_hybrid_cat %in% c("Both Models", "CalEPA", "Natural Breaks", "Inside or Adjacent to Tribe Area"))
#unique(Rich$peja_18_hybrid_cat)
map1a <-   tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() + tm_shape(Rich) +
tm_fill(col = "peja_18_hybrid_cat",
style = "cat",
title = "Legend - PEJA Type",
alpha = 1,
palette = c('#33a02c', "#b2df8a", "#1f78b4", "#a6cee3")) +
# tm_compass(type = "8star", position = c("left", "middle")) +
tm_layout("(b)",
legend.position = c("left","top"),
bg.color = "white",
title.size = 1,
inner.margin = .08,
legend.title.size = 1)
Rich00$peja_00_cat <- ifelse(Rich00$peja2k.1 == 1, "2003 PEJA", "No")
Rich00 <- subset(Rich00, Rich00$peja_00_cat %in% c("2003 PEJA"))
map2 <- tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() + tm_shape(Rich00) +
tm_fill(col = "peja_00_cat",
style = "cat",
title = "Legend - PEJA Type",
alpha = 1,
palette = c("#8073ac")) +
tm_layout("(a)",
legend.position = c("left","top"),
bg.color = "white",
title.size = 1,
inner.margin = .08,
legend.title.size = 1)
#for the box
bbox_new <- st_bbox(shapeny) # current bounding box
xrange <- bbox_new$xmax - bbox_new$xmin # range of x values
yrange <- bbox_new$ymax - bbox_new$ymin # range of y values
bbox_new[1] <- bbox_new[1] - (0.01 * xrange) # xmin - left
bbox_new[3] <- bbox_new[3] - (0.15 * xrange) # xmax - right
bbox_new[2] <- bbox_new[2] + (0.285 * yrange) # ymin - bottom
bbox_new[4] <- bbox_new[4] + (0.01 * yrange) # ymax - top
bbox_new <- bbox_new %>%  # take the bounding box ...
st_as_sfc() # ... and make it a sf polygon
# draw a prettier chart
inset_m <- tm_shape(shapeny) +
tm_fill(col = "grey") +
tm_shape(mycounty) +
tm_fill(col = "#f2f2f2") +
tm_borders() +
tm_shape(bbox_new) +
tm_borders(col = "red", lwd = 3)
inset_m
tmap_arrange(map2, map1a)
# download and read into workspace
# download.file("https://furmancenter.org/files/floodzone_states/NY-FloodzoneData-Download.xlsx",
#               destfile = "data/NY-FloodzoneData-Download.xlsx", mode="wb")
flood_risk_ny <- read_excel("data/NY-FloodzoneData-Download.xlsx",
sheet = 5)
unique(flood_risk_ny$geo_type)
unique(flood_risk_ny$geo_id)
unique(substr(flood_risk_ny$geo_id, 1,5))
nycounties$NAME
##
# NYS Heat Vulnerability Index Data
##
## Source: https://www.health.ny.gov/environmental/weather/vulnerability_index/
# download.file("https://www.health.ny.gov/environmental/weather/vulnerability_index/docs/heat_vulnerability_index_data.zip",
#               destfile = "data/heat_vulnerability_index_data.zip")
# unzip("data/heat_vulnerability_index_data.zip", exdir="./data")
NY_heat_vul <- read_excel("data/NYS Heat Vulnerability Index Data_by Census Tract.xlsx")
unique(substr(NY_heat_vul$CensusTractID, 1,5))
Food_insecure <- read_excel("data/DataDownload2015.xlsx",
sheet = 3)
Food_insecure_ny <- Food_insecure %>% filter(State == "New York") %>%
dplyr::select(CensusTract, LILATracts_1And10)
unique(substr(Food_insecure_ny$CensusTract, 1,5))
##
# Heath indicators
##
## Source: https://health.data.ny.gov/Health/Prevention-Agenda-2013-2018-Tracking-Indicators-Co/7j59-48xy
NY_health <- read_csv("https://health.data.ny.gov/api/views/7j59-48xy/rows.csv?accessType=DOWNLOAD")
#what indicators do we want?
NY_health_short <- NY_health %>% filter(Indicator %in% c(
"Asthma emergency department visit rate per 10,000 population",
"Age-adjusted heart attack hospitalization rate per 10,000 population",
"Percentage of preterm birth",
"Percentage of premature deaths (before age 65 years)")) %>%
group_by(`County Name`, Indicator) %>%
filter(`Data Years` == max(`Data Years`, na.rm = T)) %>% ungroup() %>% #take the most recent year
mutate(Indicator = paste(Indicator, `Data Years`, sep = " - ")) %>%
select(`County Name`, Indicator, `Percentage/Rate/Ratio`) %>%
group_by(`County Name`) %>%
spread(Indicator, `Percentage/Rate/Ratio`) %>% ungroup()
View(NY_health_short)
alltracts <- tracts()
us <- unique(fips_codes$state)[1:51]
x <- us[1]
acsState <- get_acs(geography = "tract",
state = x,
variables = c(population = "B01003_001",),
year = 2018)
acsState <- get_acs(geography = "tract",
state = x,
variables = c(population = "B01003_001"),
year = 2018)
alltracts <- tracts(state = x)
alltracts <- data.frame(alltracts)
View(alltracts)
mydat <- left_join(acsState, alltracts)
View(alltracts)
mydat$pop_density_land_person_per_meter = mydat$estimate/mydat$ALAND
as.numeric(mydat$estimate)
mydat$pop_density_land_person_per_meter = as.numeric(mydat$estimate)/as.numeric(mydat$ALAND)
mydat$pop_density_land_water_person_per_meter = as.numeric(mydat$estimate)/(as.numeric(mydat$ALAND) + as.numeric(mydat$AWATER))
mydat <- mydat %>% dplyr::select(GEOID, pop_density_land_water_person_per_meter, pop_density_land_person_per_meter)
acslist <- lapply(us[1:4], function (x)  censusGrabst(x))
acslistst<- acslist[[1]]
for (i in 2:length(acslist)) acslistst <- bind_rows(acslistst, acslist[[i]])
censusGrabst <- function(x) {
acsState$ <- get_acs(geography = "tract",
state = x,
variables = c(population = "B01003_001"),
year = 2018)
alltracts <- tracts(state = x)
alltracts <- data.frame(alltracts)
mydat$ <- left_join(acsState, alltracts)
mydat$pop_density_land_person_per_meter = as.numeric(mydat$estimate)/as.numeric(mydat$ALAND)
mydat$pop_density_land_water_person_per_meter = as.numeric(mydat$estimate)/(as.numeric(mydat$ALAND) + as.numeric(mydat$AWATER))
mydat <- mydat %>% dplyr::select(GEOID, pop_density_land_water_person_per_meter, pop_density_land_person_per_meter)
return(mydat)}
censusGrabst <- function(x) {
acsState$ <- get_acs(geography = "tract",
state = x,
variables = c(population = "B01003_001"),
year = 2018)
alltracts <- tracts(state = x)
alltracts <- data.frame(alltracts)
mydat$ <- left_join(acsState, alltracts)
mydat$pop_density_land_person_per_meter = as.numeric(mydat$estimate)/as.numeric(mydat$ALAND)
mydat$pop_density_land_water_person_per_meter = as.numeric(mydat$estimate)/(as.numeric(mydat$ALAND) + as.numeric(mydat$AWATER))
mydat <- mydat %>% dplyr::select(GEOID, pop_density_land_water_person_per_meter, pop_density_land_person_per_meter)
return(mydat)}
censusGrabst <- function(x) {
acsState$ <- get_acs(geography = "tract",
state = x,
variables = c(population = "B01003_001"),
year = 2018)
alltracts <- tracts(state = x)
alltracts <- data.frame(alltracts)
mydat$ <- left_join(acsState, alltracts)
mydat$pop_density_land_person_per_meter = as.numeric(mydat$estimate)/as.numeric(mydat$ALAND)
mydat$pop_density_land_water_person_per_meter = as.numeric(mydat$estimate)/(as.numeric(mydat$ALAND) + as.numeric(mydat$AWATER))
mydat <- mydat %>% dplyr::select(GEOID, pop_density_land_water_person_per_meter, pop_density_land_person_per_meter)
return(mydat)}
censusGrabst <- function(x) {
acsState <- get_acs(geography = "tract",
state = x,
variables = c(population = "B01003_001"),
year = 2018)
alltracts <- tracts(state = x)
alltracts <- data.frame(alltracts)
mydat$ <- left_join(acsState, alltracts)
mydat$pop_density_land_person_per_meter = as.numeric(mydat$estimate)/as.numeric(mydat$ALAND)
mydat$pop_density_land_water_person_per_meter = as.numeric(mydat$estimate)/(as.numeric(mydat$ALAND) + as.numeric(mydat$AWATER))
mydat <- mydat %>% dplyr::select(GEOID, pop_density_land_water_person_per_meter, pop_density_land_person_per_meter)
return(mydat)}
acsState <- get_acs(geography = "tract",
state = x,
variables = c(population = "B01003_001"),
year = 2018)
alltracts <- tracts(state = x)
alltracts <- data.frame(alltracts)
mydat$ <- left_join(acsState, alltracts)
censusGrabst <- function(x) {
acsState <- get_acs(geography = "tract",
state = x,
variables = c(population = "B01003_001"),
year = 2018)
alltracts <- tracts(state = x)
alltracts <- data.frame(alltracts)
mydat <- left_join(acsState, alltracts)
mydat$pop_density_land_person_per_meter = as.numeric(mydat$estimate)/as.numeric(mydat$ALAND)
mydat$pop_density_land_water_person_per_meter = as.numeric(mydat$estimate)/(as.numeric(mydat$ALAND) + as.numeric(mydat$AWATER))
mydat <- mydat %>% dplyr::select(GEOID, pop_density_land_water_person_per_meter, pop_density_land_person_per_meter)
return(mydat)}
acslist <- lapply(us[1:4], function (x)  censusGrabst(x))
citation("tigris")
citation("sf")
